name: build the news for linux

on:
  push:
    branches: [ master, main ]
  pull_request:
  workflow_dispatch:

jobs:
  build:
    name: Build and Package
    runs-on: ubuntu-latest
    container:
      image: fedora:41
      options: --privileged

    steps:
      - name: Install build dependencies
        run: |
          dnf -y update
          dnf -y install --skip-broken \
            cmake \
            make \
            gcc \
            gcc-c++ \
            git \
            qt6-qtbase-devel \
            qt6-qttools-devel \
            qt6-qtsvg-devel \
            qt6-qtmultimedia-devel \
            qt6-qtdeclarative-devel \
            qt6-qtquickcontrols2-devel \
            qt6-qtwayland \
            desktop-file-utils \
            patchelf \
            wget \
            libnotify-devel \
            libnotify \
            glib2-devel \
            glib2 \
            ImageMagick \
            file \
            tar

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Build project
        run: |
          mkdir -p build
          cd build
          cmake ../src
          make -j$(nproc)

      - name: Create bundle structure
        run: |
          mkdir -p bundle/usr/bin
          mkdir -p bundle/usr/lib
          
          # Copy executable
          cp build/thenews bundle/usr/bin/
          
          # Copy Qt6 libraries
          for lib in Qt6Core Qt6Gui Qt6Widgets Qt6DBus Qt6Network Qt6Svg Qt6Multimedia Qt6Quick Qt6Qml Qt6QmlModels; do
            if [ -f /usr/lib64/lib${lib}.so.6 ]; then
              cp -P /usr/lib64/lib${lib}.so* bundle/usr/lib/ 2>/dev/null || true
            fi
          done
          
          # Copy Qt plugins
          mkdir -p bundle/usr/lib/qt6
          cp -r /usr/lib64/qt6/plugins bundle/usr/lib/qt6/ 2>/dev/null || true
          
          # Get all dependencies
          echo "Collecting dependencies..."
          ldd build/thenews | grep "=> /" | awk '{print $3}' | while read lib; do
            if [ -f "$lib" ]; then
              libname=$(basename "$lib")
              # Skip system libraries that are too low-level
              if [[ ! "$libname" =~ ^(ld-linux|libc.so|libm.so|libpthread|libdl.so|librt.so).*$ ]]; then
                cp -L "$lib" bundle/usr/lib/ 2>/dev/null || true
                # Also copy symlinks
                dirname=$(dirname "$lib")
                cp -P "$dirname/$libname"* bundle/usr/lib/ 2>/dev/null || true
              fi
            fi
          done
          
          # Create launcher script
          cat > bundle/thenews << 'EOF'
          #!/bin/bash
          APPDIR="$(dirname "$(readlink -f "$0")")"
          export LD_LIBRARY_PATH="$APPDIR/usr/lib:$LD_LIBRARY_PATH"
          export QT_PLUGIN_PATH="$APPDIR/usr/lib/qt6/plugins"
          export QML_IMPORT_PATH="$APPDIR/usr/lib/qt6/qml"
          export QT_QPA_PLATFORM_PLUGIN_PATH="$APPDIR/usr/lib/qt6/plugins/platforms"
          exec "$APPDIR/usr/bin/thenews" "$@"
          EOF
          
          chmod +x bundle/thenews
          chmod +x bundle/usr/bin/thenews

      - name: Create portable archive
        run: |
          cd bundle
          tar czf ../thenews-linux-portable.tar.gz *
          cd ..

      - name: Test bundle
        run: |
          echo "Bundle contents:"
          ls -lh thenews-linux-portable.tar.gz
          echo ""
          echo "Verifying libraries are included:"
          tar -tzf thenews-linux-portable.tar.gz | grep "\.so" | head -20

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: thenews-linux
          path: thenews-linux-portable.tar.gz