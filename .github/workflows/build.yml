name: build the news for linux

on:
  push:
    branches: [ master, main ]
  pull_request:
  workflow_dispatch:

jobs:
  build:
    name: Build and Package
    runs-on: ubuntu-latest
    container:
      image: fedora:41
      options: --privileged

    steps:
      - name: Install build dependencies
        run: |
          dnf -y update
          dnf -y install --skip-broken \
            cmake \
            make \
            gcc \
            gcc-c++ \
            git \
            qt6-qtbase-devel \
            qt6-qttools-devel \
            qt6-qtsvg-devel \
            qt6-qtmultimedia-devel \
            qt6-qtdeclarative-devel \
            qt6-qtquickcontrols2-devel \
            qt6-qtwayland \
            flatpak \
            flatpak-builder \
            desktop-file-utils \
            fuse \
            fuse3 \
            patchelf \
            wget \
            libnotify-devel \
            libnotify \
            glib2-devel \
            glib2 \
            ImageMagick \
            file \
            rpm-build \
            chrpath \
            binutils

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Build project
        run: |
          mkdir -p build
          cd build
          cmake ../src
          make -j$(nproc)

      - name: Create AppDir structure
        run: |
          mkdir -p AppDir/usr/bin
          mkdir -p AppDir/usr/lib
          mkdir -p AppDir/usr/share/applications
          mkdir -p AppDir/usr/share/icons/hicolor/256x256/apps
          
          # Copy executable
          cp build/thenews AppDir/usr/bin/
          
          # Create desktop file
          cat > AppDir/usr/share/applications/thenews.desktop << EOF
          [Desktop Entry]
          Type=Application
          Name=The News
          Exec=thenews
          Icon=thenews
          Categories=News;Qt;
          Terminal=false
          EOF
          
          # Create a placeholder icon if not exists
          if [ ! -f AppDir/usr/share/icons/hicolor/256x256/apps/thenews.png ]; then
            convert -size 256x256 xc:blue AppDir/usr/share/icons/hicolor/256x256/apps/thenews.png || true
          fi

      - name: Bundle dependencies with linuxdeploy
        run: |
          cd AppDir
          
          # Download linuxdeploy and Qt plugin
          wget -q https://github.com/linuxdeploy/linuxdeploy/releases/download/continuous/linuxdeploy-x86_64.AppImage
          wget -q https://github.com/linuxdeploy/linuxdeploy-plugin-qt/releases/download/continuous/linuxdeploy-plugin-qt-x86_64.AppImage
          chmod +x linuxdeploy-x86_64.AppImage
          chmod +x linuxdeploy-plugin-qt-x86_64.AppImage
          
          # Extract AppImages (since we're in a container without FUSE)
          ./linuxdeploy-x86_64.AppImage --appimage-extract
          ./linuxdeploy-plugin-qt-x86_64.AppImage --appimage-extract
          
          # Set Qt paths
          export QT_PLUGIN_PATH=/usr/lib64/qt6/plugins
          export LD_LIBRARY_PATH=/usr/lib64:$LD_LIBRARY_PATH
          
          # Run linuxdeploy to bundle dependencies
          ./squashfs-root/AppRun \
            --appdir=. \
            --executable=usr/bin/thenews \
            --desktop-file=usr/share/applications/thenews.desktop \
            --icon-file=usr/share/icons/hicolor/256x256/apps/thenews.png \
            --plugin qt \
            --output appimage || true
          
          cd ..

      - name: Manual dependency bundling (fallback)
        run: |
          # Copy Qt6 libraries
          mkdir -p AppDir/usr/lib/qt6
          
          for lib in Qt6Core Qt6Gui Qt6Widgets Qt6DBus Qt6Network Qt6Svg Qt6Multimedia Qt6Quick Qt6Qml Qt6QmlModels; do
            if [ -f /usr/lib64/lib${lib}.so.6 ]; then
              cp -P /usr/lib64/lib${lib}.so* AppDir/usr/lib/ 2>/dev/null || true
            fi
          done
          
          # Copy Qt plugins
          cp -r /usr/lib64/qt6/plugins AppDir/usr/lib/qt6/ 2>/dev/null || true
          
          # Copy other dependencies
          ldd build/thenews | grep "=> /" | awk '{print $3}' | while read lib; do
            if [ -f "$lib" ]; then
              cp -P "$lib" AppDir/usr/lib/ 2>/dev/null || true
              # Also copy symlinks
              dirname=$(dirname "$lib")
              basename=$(basename "$lib")
              cp -P "$dirname/$basename"* AppDir/usr/lib/ 2>/dev/null || true
            fi
          done
          
          # Create wrapper script
          cat > AppDir/usr/bin/thenews-wrapper.sh << 'EOF'
          #!/bin/bash
          APPDIR=$(dirname $(dirname $(readlink -f "$0")))
          export LD_LIBRARY_PATH="$APPDIR/usr/lib:$LD_LIBRARY_PATH"
          export QT_PLUGIN_PATH="$APPDIR/usr/lib/qt6/plugins"
          export QML_IMPORT_PATH="$APPDIR/usr/lib/qt6/qml"
          exec "$APPDIR/usr/bin/thenews" "$@"
          EOF
          
          chmod +x AppDir/usr/bin/thenews-wrapper.sh

      - name: Create standalone archive
        run: |
          cd AppDir
          tar czf ../thenews-linux-bundle.tar.gz *
          cd ..

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: thenews-linux
          path: |
            thenews-linux-bundle.tar.gz
            AppDir/*.AppImage
            build/thenews