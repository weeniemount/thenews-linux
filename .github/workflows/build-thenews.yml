name: build the news for linux

on:
  push:
    branches: [ master, main ]
  pull_request:
  workflow_dispatch:

jobs:
  build:
    name: Build and Package
    runs-on: ubuntu-latest
    container:
      image: fedora:42
      options: --privileged

    steps:
      - name: Install build dependencies
        run: |
          dnf -y update
          dnf -y install --skip-broken \
            cmake \
            make \
            gcc \
            gcc-c++ \
            git \
            qt6-qtbase-devel \
            qt6-qttools-devel \
            qt6-qtsvg-devel \
            qt6-qtmultimedia-devel \
            qt6-qtdeclarative-devel \
            qt6-qtquickcontrols2-devel \
            qt6-qtwayland \
            flatpak \
            flatpak-builder \
            desktop-file-utils \
            fuse \
            fuse3 \
            patchelf \
            wget \
            libnotify-devel \
            libnotify \
            glib2-devel \
            glib2 \
            ImageMagick \
            file

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Build project
        run: |
          mkdir -p build
          cd build
          cmake ../src
          make -j$(nproc)

      - name: Prepare Flatpak manifest
        run: |
          # Create a .desktop file dynamically if it doesn't exist
          mkdir -p src/assets
          if [ ! -f src/assets/thenews.desktop ]; then
            cat > src/assets/thenews.desktop <<'DESKTOP_EOF'
          [Desktop Entry]
          Name=the news
          Exec=thenews
          Icon=com.weenie.thenews
          Type=Application
          Categories=Utility;
          DESKTOP_EOF
          fi

          # Create Flatpak manifest with Qt6 runtime
          cat > com.weenie.thenews.yml <<'FLATPAK_EOF'
          app-id: com.weenie.thenews
          runtime: org.kde.Platform
          runtime-version: '6.8'
          sdk: org.kde.Sdk
          command: thenews
          finish-args:
            - --share=network
            - --socket=x11
            - --socket=wayland
            - --device=dri
            - --filesystem=home
          modules:
            - name: thenews
              buildsystem: simple
              build-commands:
                - install -Dm755 build/thenews /app/bin/thenews
                - install -Dm644 src/assets/thenews.png /app/share/icons/hicolor/256x256/apps/com.weenie.thenews.png
                - install -Dm644 src/assets/thenews.desktop /app/share/applications/com.weenie.thenews.desktop
                - desktop-file-edit --set-icon=com.weenie.thenews /app/share/applications/com.weenie.thenews.desktop
              sources:
                - type: dir
                  path: .
          FLATPAK_EOF

      - name: Build Flatpak
        run: |
          # Add flathub remote
          flatpak remote-add --if-not-exists flathub https://dl.flathub.org/repo/flathub.flatpakrepo
          
          # Install KDE runtime and SDK with Qt6
          flatpak install -y flathub org.kde.Platform//6.8
          flatpak install -y flathub org.kde.Sdk//6.8
          
          # Build Flatpak with --disable-rofiles-fuse to work in containers
          flatpak-builder --disable-rofiles-fuse --force-clean build-dir com.weenie.thenews.yml
          flatpak build-export repo build-dir
          flatpak build-bundle repo thenews.flatpak com.weenie.thenews

      - name: Build AppImage
        run: |
          APPDIR=AppDir
          mkdir -p $APPDIR/usr/bin
          mkdir -p $APPDIR/usr/share/applications
          mkdir -p $APPDIR/usr/share/icons/hicolor/256x256/apps
          mkdir -p $APPDIR/usr/plugins/platforms
          mkdir -p $APPDIR/usr/plugins/platformthemes
          mkdir -p $APPDIR/usr/plugins/wayland-shell-integration
          mkdir -p $APPDIR/usr/plugins/wayland-decoration-client
          mkdir -p $APPDIR/usr/plugins/wayland-graphics-integration-client
          mkdir -p $APPDIR/usr/plugins/xcbglintegrations
          mkdir -p $APPDIR/usr/plugins/imageformats
          mkdir -p $APPDIR/usr/plugins/iconengines

          # Copy binary
          cp build/thenews $APPDIR/usr/bin/

          # Resize icon to 256x256 and copy it
          magick src/assets/thenews.png -resize 256x256 $APPDIR/usr/share/icons/hicolor/256x256/apps/thenews.png

          # Create .desktop file
          cat > $APPDIR/usr/share/applications/thenews.desktop <<'APPIMAGE_EOF'
          [Desktop Entry]
          Name=the news
          Exec=thenews
          Icon=thenews
          Type=Application
          Categories=Utility;
          APPIMAGE_EOF

          # Copy Qt6 plugins manually - including Wayland support
          echo "Copying Qt6 plugins..."
          
          # Platform plugins (XCB and Wayland)
          cp -r /usr/lib64/qt6/plugins/platforms $APPDIR/usr/plugins/ 2>/dev/null || true
          
          # Wayland plugins - CRITICAL for Wayland support
          cp -r /usr/lib64/qt6/plugins/wayland-shell-integration $APPDIR/usr/plugins/ 2>/dev/null || true
          cp -r /usr/lib64/qt6/plugins/wayland-decoration-client $APPDIR/usr/plugins/ 2>/dev/null || true
          cp -r /usr/lib64/qt6/plugins/wayland-graphics-integration-client $APPDIR/usr/plugins/ 2>/dev/null || true
          
          # Other plugins
          cp -r /usr/lib64/qt6/plugins/platformthemes $APPDIR/usr/plugins/ 2>/dev/null || true
          cp -r /usr/lib64/qt6/plugins/xcbglintegrations $APPDIR/usr/plugins/ 2>/dev/null || true
          cp -r /usr/lib64/qt6/plugins/imageformats $APPDIR/usr/plugins/ 2>/dev/null || true
          cp -r /usr/lib64/qt6/plugins/iconengines $APPDIR/usr/plugins/ 2>/dev/null || true
          
          # Also copy Wayland client library if it exists
          cp /usr/lib64/libQt6WaylandClient.so.6* $APPDIR/usr/lib/ 2>/dev/null || true
          cp /usr/lib64/libQt6WaylandEglClientHwIntegration.so.6* $APPDIR/usr/lib/ 2>/dev/null || true
          
          # Create qt.conf to tell Qt where to find plugins
          cat > $APPDIR/usr/bin/qt.conf <<'QTCONF_EOF'
          [Paths]
          Plugins = ../plugins
          QTCONF_EOF

          # Create AppRun wrapper to set environment properly
          cat > $APPDIR/AppRun <<'APPRUN_EOF'
          #!/bin/bash
          APPDIR="$(dirname "$(readlink -f "$0")")"
          
          # Set Qt plugin path
          export QT_PLUGIN_PATH="$APPDIR/usr/plugins"
          
          # Support both Wayland and X11, with fallback
          export QT_QPA_PLATFORM="wayland;xcb"
          
          # Run the application
          exec "$APPDIR/usr/bin/thenews" "$@"
          APPRUN_EOF
          chmod +x $APPDIR/AppRun

          # Download linuxdeploy
          wget -q https://github.com/linuxdeploy/linuxdeploy/releases/download/continuous/linuxdeploy-x86_64.AppImage
          chmod +x linuxdeploy-x86_64.AppImage

          # Extract the AppImage to avoid FUSE issues in containers
          ./linuxdeploy-x86_64.AppImage --appimage-extract
          
          # Set environment variables
          export DISABLE_COPYRIGHT_FILES_DEPLOYMENT=1
          export NO_STRIP=1
          export ARCH=x86_64
          
          # Build AppImage using extracted linuxdeploy
          ./squashfs-root/AppRun --appdir $APPDIR \
            -d $APPDIR/usr/share/applications/thenews.desktop \
            -i $APPDIR/usr/share/icons/hicolor/256x256/apps/thenews.png \
            --output appimage
          
          # Verify Qt plugins were bundled
          echo "=== Checking bundled Qt plugins ==="
          echo "Platform plugins:"
          find $APPDIR/usr/plugins/platforms -name "*.so" 2>/dev/null || echo "WARNING: No platform plugins found!"
          echo "Wayland plugins:"
          find $APPDIR/usr/plugins/wayland-* -name "*.so" 2>/dev/null || echo "WARNING: No Wayland plugins found!"
          
          # List generated AppImage files
          echo "=== Generated AppImage files ==="
          ls -lh *.AppImage || echo "ERROR: No AppImage files generated"

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: thenews-linux
          path: |
            ./*.flatpak
            ./*.AppImage